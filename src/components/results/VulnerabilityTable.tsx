// src/components/results/VulnerabilityTable.tsx
"use client";

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import {
  ChevronDown,
  ChevronUp,
  AlertCircle,
  AlertTriangle,
  Info,
} from "lucide-react";
import { useState } from "react";

interface Vulnerability {
  id: number;
  file: string;
  line: number;
  severity: string;
  description: string;
}

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
}

export default function VulnerabilityTable({
  vulnerabilities,
}: VulnerabilityTableProps) {
  const [expandedId, setExpandedId] = useState<number | null>(null);

  const toggleExpand = (id: number) => {
    setExpandedId(expandedId === id ? null : id);
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "high":
        return <AlertCircle className="h-4 w-4 text-red-500" />;
      case "medium":
        return <AlertTriangle className="h-4 w-4 text-yellow-500" />;
      case "low":
        return <Info className="h-4 w-4 text-green-500" />;
      default:
        return <Info className="h-4 w-4" />;
    }
  };

  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead className="w-12"></TableHead>
          <TableHead className="w-12">Severity</TableHead>
          <TableHead>File</TableHead>
          <TableHead className="w-24">Line</TableHead>
          <TableHead>Description</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {vulnerabilities.map((vulnerability) => (
          <>
            <TableRow
              key={vulnerability.id}
              className="cursor-pointer hover:bg-muted/50"
              onClick={() => toggleExpand(vulnerability.id)}
            >
              <TableCell>
                <Button variant="ghost" size="icon" className="h-8 w-8 p-0">
                  {expandedId === vulnerability.id ? (
                    <ChevronUp className="h-4 w-4" />
                  ) : (
                    <ChevronDown className="h-4 w-4" />
                  )}
                </Button>
              </TableCell>
              <TableCell>{getSeverityIcon(vulnerability.severity)}</TableCell>
              <TableCell className="font-mono text-sm">
                {vulnerability.file}
              </TableCell>
              <TableCell>{vulnerability.line}</TableCell>
              <TableCell>{vulnerability.description}</TableCell>
            </TableRow>
            {expandedId === vulnerability.id && (
              <TableRow>
                <TableCell colSpan={5} className="bg-muted/30 p-4">
                  <div className="space-y-2">
                    <h4 className="font-semibold">Details</h4>
                    <p className="text-sm">
                      This vulnerability could allow attackers to{" "}
                      {vulnerability.severity === "high"
                        ? "gain unauthorized access to sensitive data or execute arbitrary code."
                        : vulnerability.severity === "medium"
                        ? "potentially compromise parts of the system under certain conditions."
                        : "cause minor issues that should be addressed but pose limited risk."}
                    </p>
                    <h4 className="font-semibold mt-2">Recommended Fix</h4>
                    <p className="text-sm">
                      {vulnerability.severity === "high"
                        ? "Implement proper input validation and authentication mechanisms."
                        : vulnerability.severity === "medium"
                        ? "Update the validation logic to handle all edge cases securely."
                        : "Follow security best practices by sanitizing inputs appropriately."}
                    </p>
                  </div>
                </TableCell>
              </TableRow>
            )}
          </>
        ))}
      </TableBody>
    </Table>
  );
}
